{"ID":"20250618150515-kw3n30o","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250618150515-kw3n30o","title":"openssl","type":"doc","updated":"20250618150650"},"Children":[{"ID":"20250618150544-h060hus","Type":"NodeParagraph","Properties":{"id":"20250618150544-h060hus","updated":"20250618150547"},"Children":[{"Type":"NodeText","Data":"openssl"}]},{"ID":"20250618150515-dj3a6je","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250618150515-dj3a6je","updated":"20250618150541"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz\ntar xzf openssl-1.1.1w.tar.gz\ncd openssl-1.1.1w\n\n# 配置交叉编译\nexport CROSS_COMPILE=arm-linux-gnueabihf-\n./Configure linux-generic32 no-shared no-async --prefix=/your/output/path\n\nmake -j4\nmake install\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250618150549-5ia9db3","Type":"NodeParagraph","Properties":{"id":"20250618150549-5ia9db3","updated":"20250618150553"},"Children":[{"Type":"NodeText","Data":"zlib"}]},{"ID":"20250618150553-hk0mwyi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250618150553-hk0mwyi","updated":"20250618150605"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"wget https://zlib.net/zlib-1.2.13.tar.gz\ntar xzf zlib-1.2.13.tar.gz\ncd zlib-1.2.13\nCC=arm-fhva12c-linux-uclibcgnueabihf-gcc ./configure --static\nmake\ncp libz.a /your/openssl/dir\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250618150617-3ajypol","Type":"NodeParagraph","Properties":{"id":"20250618150617-3ajypol","updated":"20250618150621"},"Children":[{"Type":"NodeText","Data":"编译demo"}]},{"ID":"20250618150622-tfmwx5x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250618150622-tfmwx5x","updated":"20250618150627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"arm-fhva12c-linux-uclibcgnueabihf-gcc http_client.c libssl.a libcrypto.a libz.a \\\n  -I. \\\n  -ldl -lpthread -o https_client\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250618150627-njdltkv","Type":"NodeParagraph","Properties":{"id":"20250618150627-njdltkv","updated":"20250618150633"},"Children":[{"Type":"NodeText","Data":"client"}]},{"ID":"20250618150633-3zckxzs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250618150633-3zckxzs","updated":"20250618150641"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\n#include \u003copenssl/ssl.h\u003e\n#include \u003copenssl/err.h\u003e\n#include \u003copenssl/bio.h\u003e\n#include \u003copenssl/buffer.h\u003e\n\nint main() {\n    const char *msg = \"hello from board\";\n\n    // 初始化 OpenSSL\n    SSL_library_init();\n    OpenSSL_add_all_algorithms();\n    SSL_load_error_strings();\n    SSL_CTX *ctx = SSL_CTX_new(TLS_client_method());\n\n    // 创建连接\n    BIO *bio = BIO_new_ssl_connect(ctx);\n    BIO_set_conn_hostname(bio, \"192.168.1.100:8443\"); // 替换为你的服务器IP\n\n    if (BIO_do_connect(bio) \u003c= 0) {\n        printf(\"Failed to connect.\\n\");\n        return 1;\n    }\n\n    // Base64 编码\n    BIO *b64 = BIO_new(BIO_f_base64());\n    BIO *mem = BIO_new(BIO_s_mem());\n    b64 = BIO_push(b64, mem);\n    BIO_write(b64, msg, strlen(msg));\n    BIO_flush(b64);\n    BUF_MEM *bptr;\n    BIO_get_mem_ptr(b64, \u0026bptr);\n    \n    // 构造 HTTP 请求\n    char request[512];\n    int len = snprintf(request, sizeof(request),\n        \"POST / HTTP/1.1\\r\\n\"\n        \"Host: 192.168.1.100\\r\\n\"\n        \"Content-Length: %ld\\r\\n\"\n        \"Content-Type: text/plain\\r\\n\\r\\n\"\n        \"%.*s\",\n        bptr-\u003elength, (int)bptr-\u003elength, bptr-\u003edata);\n\n    BIO_write(bio, request, len);\n\n    // 读取响应\n    char buffer[1024];\n    int r = BIO_read(bio, buffer, sizeof(buffer) - 1);\n    if (r \u003e 0) {\n        buffer[r] = 0;\n        printf(\"Server reply:\\n%s\\n\", buffer);\n    }\n\n    BIO_free_all(bio);\n    BIO_free_all(b64);\n    SSL_CTX_free(ctx);\n    return 0;\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250618150643-pxhl9rt","Type":"NodeParagraph","Properties":{"id":"20250618150643-pxhl9rt","updated":"20250618150644"},"Children":[{"Type":"NodeText","Data":"server"}]},{"ID":"20250618150645-a99fqvf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250618150645-a99fqvf","updated":"20250618150650"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"# https_server.py\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nimport ssl\nimport base64\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_len = int(self.headers['Content-Length'])\n        body = self.rfile.read(content_len)\n        decoded = base64.b64decode(body)\n        print(\"Received:\", decoded.decode())\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b\"OK\")\n\nhttpd = HTTPServer(('0.0.0.0', 8443), Handler)\nhttpd.socket = ssl.wrap_socket(httpd.socket,\n                               certfile=\"cert.pem\",\n                               keyfile=\"key.pem\",\n                               server_side=True)\nprint(\"Serving HTTPS on port 8443...\")\nhttpd.serve_forever()\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}