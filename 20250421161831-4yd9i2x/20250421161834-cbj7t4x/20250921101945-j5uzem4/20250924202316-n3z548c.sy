{"ID":"20250924202316-n3z548c","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250924202316-n3z548c","title":"priority_queue","type":"doc","updated":"20250924214745"},"Children":[{"ID":"20250924212954-lapabuz","Type":"NodeParagraph","Properties":{"id":"20250924212954-lapabuz","updated":"20250924213004"},"Children":[{"Type":"NodeText","Data":"数组表示二叉堆"}]},{"ID":"20250924202316-79cv3vb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250924202316-79cv3vb","updated":"20250924214745"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"构造：\n\tpriority_queue\u003cint\u003e temp1; 默认最大优先队列\n\tpriority_queue\u003cint, vector\u003cint\u003e, greater\u003cint\u003e\u003e temp2; 最小优先队列\n入队：\n\ttemp.push(3); \n获取堆顶：\n\ttemp.top();\n出队：\n\ttemp.pop();  //内部是顶和底互换，然后删除，顶进行下沉\n大小操作：\n\ttemp.empty();\n\ttemp.size();\n自定义结构：\n\tpriority_queue\u003cmyclass\u003e temp;\n\ttemp.push(myclass(3,2,1));  //需要myclass实现 运算符\u003c 重载  建议这种方法\n\tpriority_queue\u003cmyclass, vector\u003cmyclass\u003e, compare\u003e temp;  //compare是运算符重载的\n\t \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250924204217-4uehnqv","Type":"NodeParagraph","Properties":{"id":"20250924204217-4uehnqv","updated":"20250924204217"}}]}