{"ID":"20251014150038-526p2mh","Spec":"1","Type":"NodeDocument","Properties":{"id":"20251014150038-526p2mh","title":"返回值和错误处理","type":"doc","updated":"20251014150116"},"Children":[{"ID":"20251014150059-nwrf1fv","Type":"NodeParagraph","Properties":{"id":"20251014150059-nwrf1fv","updated":"20251014150059"},"Children":[{"Type":"NodeText","Data":"Rust 中的错误主要分为两类："}]},{"ID":"20251014150059-ng744ad","Type":"NodeList","ListData":{},"Properties":{"id":"20251014150059-ng744ad","updated":"20251014150059"},"Children":[{"ID":"20251014150059-nz4n5yt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20251014150059-nz4n5yt","updated":"20251014150059"},"Children":[{"ID":"20251014150059-uj219jf","Type":"NodeParagraph","Properties":{"id":"20251014150059-uj219jf","updated":"20251014150059"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可恢复错误"},{"Type":"NodeText","Data":"​，通常用于从系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响"}]}]},{"ID":"20251014150059-89asine","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20251014150059-89asine","updated":"20251014150059"},"Children":[{"ID":"20251014150059-mcngnti","Type":"NodeParagraph","Properties":{"id":"20251014150059-mcngnti","updated":"20251014150059"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不可恢复错误"},{"Type":"NodeText","Data":"，刚好相反，该错误通常是全局性或者系统性的错误，例如数组越界访问，系统启动时发生了影响启动流程的错误等等，这些错误的影响往往对于系统来说是致命的"}]}]}]},{"ID":"20251014150110-b1596pz","Type":"NodeParagraph","Properties":{"id":"20251014150110-b1596pz","updated":"20251014150114"},"Children":[{"Type":"NodeText","Data":"很多编程语言，并不会区分这些错误，而是直接采用异常的方式去处理。Rust 没有异常，但是 Rust 也有自己的卧龙凤雏：Result\u003cT, E\u003e 用于可恢复错误，panic! 用于不可恢复错误。"}]},{"ID":"20251014150116-wfyhkhg","Type":"NodeParagraph","Properties":{"id":"20251014150116-wfyhkhg","updated":"20251014150116"}}]}