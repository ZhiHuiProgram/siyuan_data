{"ID":"20251012183713-w6di192","Spec":"1","Type":"NodeDocument","Properties":{"id":"20251012183713-w6di192","title":"动态数组Vector","type":"doc","updated":"20251012225940"},"Children":[{"ID":"20251012183713-iaj1yxz","Type":"NodeParagraph","Properties":{"id":"20251012183713-iaj1yxz","updated":"20251012183956"},"Children":[{"Type":"NodeText","Data":"定义："}]},{"ID":"20251012183957-zuaw18j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251012183957-zuaw18j","updated":"20251012225940"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"Vec\u003cT\u003e\n\nlet v: Vec\u003ci32\u003e = Vec::new(); //new一个空的\n\nlet mut s = Vec::with_capacity(capacity); //new一个可变vec容量为capacity， 后面有push的话会自动推导类型\nv.extend([1, 2, 3]);  //开辟容量后快速填充数据\nv.reserve(100);  //修改容量，至少100，不能小于当前\nv.shrink_to_fit();  //释放多余的容量\n\nlet mut v = Vec::new();  //new一个可变vec， 后面有push的话会自动推导类型\nv.push(1);\n\nlet v = vec![1, 2, 3];  直接初始化\nlet v = vec![0; 3];   初始化3个0\nlet v_from = Vec::from([0, 0, 0]);  //和String有点像\n\n作用域限制：\n{\n    let v = vec![1, 2, 3];\n\n    // ...\n}\n常用例子：\n\tassert!(!v.is_empty()); \n\tv.insert(2, 3);  //位置2插入3\n\tassert_eq!(v.remove(1), 2); //移除后会返回移除的数据\n\tassert_eq!(v.pop(), Some(3)); //pop尾部数据，返回的是枚举值\n\tv.clear();  //清空\n\n\tlet mut v1 = [11, 22].to_vec();\n\tv.append(\u0026mut v1); //特性，append会清空输入的数据\n\tv.extend(v1.iter());  //追加尾部，不会清空\n\tv.truncate(1);    //截断到长度1，只剩下第一个元素了\n\tv.retain(|x| *x \u003e 10);隐式 //保留满足条件的元素，删除不满足条件的元素  //|\u0026x| x \u003e3  |x:\u0026i32| *x \u003e3显示\n\tlet mut m: Vec\u003c_\u003e = v.drain(1..=3).collect(); //删除指定范围元素，返回移除的元素Vec\n\tlet v2 = m.split_off(1);  //指定索引处切分为两个， m 和 v2\n\t\n\tlet slice = \u0026v[1..=3];数组切片，之前就讲过\n访问元素：\n\tlet v = vec![1, 2, 3, 4, 5];\n\tlet third: \u0026i32 = \u0026v[2];  \n\tprintln!(\"第三个元素是 {}\", third);  //这里会自动解引用\n\n\n\tmatch v.get(2) { //这里get因为不确定返回有没有东西，所以返回的是一个Option枚举\n\t    Some(third) =\u003e println!(\"第三个元素是 {third}\"),\n\t    None =\u003e println!(\"去你的第三个元素，根本没有！\"),\n\t}\n\n排序：\n\tlet mut vec = vec![1, 5, 10, 2, 15];    \n    vec.sort_unstable();  \n\tassert_eq!(vec, vec![1, 2, 5, 10, 15]);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251012222231-9ms757t","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20251012222231-9ms757t","updated":"20251012223548"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://course.rs/basic/collections/vector.html#%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86-vector-%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0","TextMarkTextContent":"迭代遍历 Vector 中的元素"}]},{"ID":"20251012222232-2498zwy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251012222232-2498zwy","updated":"20251012222316"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"let v = vec![1, 2, 3];\nfor i in \u0026v {\n    println!(\"{i}\");\n}\n\nlet mut v = vec![1, 2, 3];\nfor i in \u0026mut v {\n    *i += 10\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251012222307-o2wijz5","Type":"NodeParagraph","Properties":{"id":"20251012222307-o2wijz5","updated":"20251012222412"},"Children":[{"Type":"NodeText","Data":"存储不同类型的元素：枚举法"}]},{"ID":"20251012222402-854oyqc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251012222402-854oyqc","updated":"20251012222407"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"#[derive(Debug)]\nenum IpAddr {\n    V4(String),\n    V6(String)\n}\nfn main() {\n    let v = vec![\n        IpAddr::V4(\"127.0.0.1\".to_string()),\n        IpAddr::V6(\"::1\".to_string())\n    ];\n\n    for ip in v {\n        show_addr(ip)\n    }\n}\n\nfn show_addr(ip: IpAddr) {\n    println!(\"{:?}\",ip);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251012222415-guu5bbj","Type":"NodeParagraph","Properties":{"id":"20251012222415-guu5bbj","updated":"20251012222429"},"Children":[{"Type":"NodeText","Data":"存储不同类型的元素：特征对象"}]},{"ID":"20251012222429-rikx0vt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251012222429-rikx0vt","updated":"20251012222458"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"trait IpAddr {\n    fn display(\u0026self);\n}\n\nstruct V4(String);\nimpl IpAddr for V4 {\n    fn display(\u0026self) {\n        println!(\"ipv4: {:?}\",self.0)\n    }\n}\nstruct V6(String);\nimpl IpAddr for V6 {\n    fn display(\u0026self) {\n        println!(\"ipv6: {:?}\",self.0)\n    }\n}\n\nfn main() {\n    let v: Vec\u003cBox\u003cdyn IpAddr\u003e\u003e = vec![\n        Box::new(V4(\"127.0.0.1\".to_string())),\n        Box::new(V6(\"::1\".to_string())),\n    ];\n\n    for ip in v {\n        ip.display();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251012223548-0xz25a8","Type":"NodeParagraph","Properties":{"id":"20251012223548-0xz25a8","updated":"20251012223548"}}]}