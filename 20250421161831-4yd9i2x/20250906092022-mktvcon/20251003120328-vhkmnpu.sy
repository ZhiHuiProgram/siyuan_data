{"ID":"20251003120328-vhkmnpu","Spec":"1","Type":"NodeDocument","Properties":{"id":"20251003120328-vhkmnpu","title":"方法","type":"doc","updated":"20251003124431"},"Children":[{"ID":"20251003120328-6jkkpgd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251003120328-6jkkpgd","updated":"20251003124349"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"struct Circle {\n    width: f64,\n    high: f64,\n    radius: f64,\n}\nimpl Circle {    \n\t// new是Circle的关联函数，因为它的第一个参数不是self，且new并不是关键字\n    // 这种方法往往用于初始化当前结构体的实例\n\t// 关联函数 使用 :: 调用，new作为构造器\n    fn new(x: f64, y: f64, radius: f64) -\u003e Circle {\n        Circle {\n            x: x,\n            y: y,\n            radius: radius,\n        }\n    }\n\tfn width(\u0026self) -\u003e width{    //可以出现同名的方法与字段往往在私有化成员时，返回\n\t\treturn self.width;\n\t}\n    // Circle的方法，\u0026self表示借用当前的Circle结构体\n    fn area(\u0026self) -\u003e f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n    fn can_hold(\u0026self, other: \u0026Circle ) -\u003e bool {   //可以多参\n        self.width \u003e other.width \u0026\u0026 self.height \u003e other.height\n    }\n}\nimpl Rectangle {   //可以多次定义 impl\n    fn area(\u0026self) -\u003e u32 {\n        self.width * self.height\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251003123337-az3aqr7","Type":"NodeParagraph","Properties":{"id":"20251003123337-az3aqr7","updated":"20251003123339"},"Children":[{"Type":"NodeText","Data":"封装："}]},{"ID":"20251003123340-rhwr9tg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251003123340-rhwr9tg","updated":"20251003123341"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"mod my {\n    pub struct Rectangle {\n        width: u32,\n        pub height: u32,\n    }\n\n    impl Rectangle {\n        pub fn new(width: u32, height: u32) -\u003e Self {\n            Rectangle { width, height }\n        }\n        pub fn width(\u0026self) -\u003e u32 {\n            return self.width;\n        }\n        pub fn height(\u0026self) -\u003e u32 {\n            return self.height;\n        }\n    }\n}\n\nfn main() {\n    let rect1 = my::Rectangle::new(30, 50);\n\n    println!(\"{}\", rect1.width()); // OK\n    println!(\"{}\", rect1.height()); // OK\n    // println!(\"{}\", rect1.width); // Error - the visibility of field defaults to private\n    println!(\"{}\", rect1.height); // OK\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251003124321-6m1dbpn","Type":"NodeParagraph","Properties":{"id":"20251003124321-6m1dbpn","updated":"20251003124426"},"Children":[{"Type":"NodeText","Data":"枚举亦可实现方法："}]},{"ID":"20251003124426-n3xlnpl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251003124426-n3xlnpl","updated":"20251003124431"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"#![allow(unused)]\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\t\nimpl Message {\n    fn call(\u0026self) {\n        // 在这里定义方法体\n    }\n}\n\nfn main() {\n    let m = Message::Write(String::from(\"hello\"));\n    m.call();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}