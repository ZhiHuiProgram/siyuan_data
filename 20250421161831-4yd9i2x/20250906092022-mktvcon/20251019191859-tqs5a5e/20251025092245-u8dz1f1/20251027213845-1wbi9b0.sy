{"ID":"20251027213845-1wbi9b0","Spec":"1","Type":"NodeDocument","Properties":{"id":"20251027213845-1wbi9b0","title":"Sized 和不定长类型 DST","type":"doc","updated":"20251027224640"},"Children":[{"ID":"20251027213845-typfs7x","Type":"NodeParagraph","Properties":{"id":"20251027213845-typfs7x","updated":"20251027215413"},"Children":[{"Type":"NodeText","Data":"Rust 中类型有多种抽象的分类方式"}]},{"ID":"20251027215419-pq2dil9","Type":"NodeParagraph","Properties":{"id":"20251027215419-pq2dil9","updated":"20251027215425"},"Children":[{"Type":"NodeText","Data":"从编译器何时能获知类型大小的角度出发，可以分成两类:"}]},{"ID":"20251027215422-glzpetu","Type":"NodeList","ListData":{},"Properties":{"id":"20251027215422-glzpetu","updated":"20251027215422"},"Children":[{"ID":"20251027215422-1vm8g41","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20251027215422-1vm8g41","updated":"20251027215422"},"Children":[{"ID":"20251027215422-j80sbrp","Type":"NodeParagraph","Properties":{"id":"20251027215422-j80sbrp","updated":"20251027215422"},"Children":[{"Type":"NodeText","Data":"定长类型( sized )，这些类型的大小在编译时是已知的"}]}]},{"ID":"20251027215422-a5zq7y1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20251027215422-a5zq7y1","updated":"20251027215422"},"Children":[{"ID":"20251027215422-icc7v7p","Type":"NodeParagraph","Properties":{"id":"20251027215422-icc7v7p","updated":"20251027215422"},"Children":[{"Type":"NodeText","Data":"不定长类型( unsized )，与定长类型相反，它的大小只有到了程序运行时才能动态获知，这种类型又被称之为 DST"}]}]}]},{"ID":"20251027215638-ai9xvuz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20251027215638-ai9xvuz","updated":"20251027220621"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://course.rs/advance/into-types/sized.html#%E5%8A%A8%E6%80%81%E5%A4%A7%E5%B0%8F%E7%B1%BB%E5%9E%8B-dst","TextMarkTextContent":"动态大小类型 DST"}]},{"ID":"20251027215639-rufbzsc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027215639-rufbzsc","linewrap":"true","updated":"20251027220356"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"固定大小的类型，包括集合 Vec、String 和 HashMap 等\n编译器无法在编译期得知该类型值的大小，只有到了程序运行时，才能动态获知。对于动态类型，我们使用 DST(dynamically sized types)或者 unsized 类型来称呼它。\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027220401-q5pokq6","Type":"NodeParagraph","Properties":{"id":"20251027220401-q5pokq6","updated":"20251027220559"},"Children":[{"Type":"NodeText","Data":"错误："}]},{"ID":"20251027220555-tv84lxq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027220555-tv84lxq","updated":"20251027220603"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"fn my_function(n: usize) {\n    let array = [123; n];\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027220612-d1992g4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20251027220612-d1992g4","updated":"20251027220621"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://course.rs/advance/into-types/sized.html#%E5%88%87%E7%89%87","TextMarkTextContent":"切片"},{"Type":"NodeText","Data":"：切片也是一个典型的 DST 类型"}]},{"ID":"20251027220625-4ywrcdn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20251027220625-4ywrcdn","updated":"20251027220709"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://course.rs/advance/into-types/sized.html#str","TextMarkTextContent":"str"},{"Type":"NodeText","Data":" ：它既不是 String 动态字符串，也不是 \u0026str 字符串切片，而是一个 str。它是一个动态类型，同时还是 String 和 \u0026str 的底层数据类型"}]},{"ID":"20251027220648-ate47ga","Type":"NodeParagraph","Properties":{"id":"20251027220648-ate47ga","updated":"20251027220703"},"Children":[{"Type":"NodeText","Data":"error"}]},{"ID":"20251027220703-dk3xdk5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027220703-dk3xdk5","updated":"20251027220708"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"// error\nlet s1: str = \"Hello there!\";\nlet s2: str = \"How's it going?\";\n\n// ok\nlet s3: \u0026str = \"on?\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027221144-xci6e4y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20251027221144-xci6e4y","updated":"20251027221409"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://course.rs/advance/into-types/sized.html#%E6%80%BB%E7%BB%93%E5%8F%AA%E8%83%BD%E9%97%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E7%9A%84-dst","TextMarkTextContent":"总结：只能间接使用的 DST"}]},{"ID":"20251027221412-axqcq86","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20251027221412-axqcq86","updated":"20251027224640"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://course.rs/advance/into-types/sized.html#sized-%E7%89%B9%E5%BE%81","TextMarkTextContent":"Sized 特征"}]},{"ID":"20251027221442-o87hi71","Type":"NodeParagraph","Properties":{"id":"20251027221442-o87hi71","updated":"20251027221444"},"Children":[{"Type":"NodeText","Data":"Rust 如何保证我们的泛型参数是固定大小的类型呢："}]},{"ID":"20251027221444-e41u3un","Type":"NodeParagraph","Properties":{"id":"20251027221444-e41u3un","updated":"20251027221451"},"Children":[{"Type":"NodeText","Data":"fn generic\u003cT\u003e(t: T) {\n    // --snip--\n}"}]},{"ID":"20251027221452-85ybm7v","Type":"NodeParagraph","Properties":{"id":"20251027221452-85ybm7v","updated":"20251027221453"},"Children":[{"Type":"NodeText","Data":"|"}]},{"ID":"20251027221453-2kdlm8i","Type":"NodeParagraph","Properties":{"id":"20251027221453-2kdlm8i","updated":"20251027221454"},"Children":[{"Type":"NodeText","Data":"|"}]},{"ID":"20251027221454-5y10lf9","Type":"NodeParagraph","Properties":{"id":"20251027221454-5y10lf9","updated":"20251027221455"},"Children":[{"Type":"NodeText","Data":"v"}]},{"ID":"20251027221455-l4u0kbq","Type":"NodeParagraph","Properties":{"id":"20251027221455-l4u0kbq","updated":"20251027221458"},"Children":[{"Type":"NodeText","Data":"fn generic\u003cT: Sized\u003e(t: T) {\n    // --snip--\n}"}]},{"ID":"20251027221459-snmbfoy","Type":"NodeParagraph","Properties":{"id":"20251027221459-snmbfoy","updated":"20251027221545"},"Children":[{"Type":"NodeText","Data":"在上面，Rust 自动添加的特征约束 T: Sized，表示泛型函数只能用于一切实现了 Sized 特征的类型"}]},{"ID":"20251027221546-740rd0l","Type":"NodeParagraph","Properties":{"id":"20251027221546-740rd0l","updated":"20251027222013"},"Children":[{"Type":"NodeText","Data":"假如想在泛型函数中使用动态数据类型怎么办？可以使用 ?Sized 特征"}]},{"ID":"20251027222000-rhbjysu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027222000-rhbjysu","updated":"20251027222003"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"fn generic\u003cT: ?Sized\u003e(t: \u0026T) {\n    // --snip--\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027222032-r5ph3yi","Type":"NodeParagraph","Properties":{"id":"20251027222032-r5ph3yi","updated":"20251027222033"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"?Sized"},{"Type":"NodeText","Data":"​ 特征用于表明类型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":"​ 既有可能是固定大小的类型，也可能是动态大小的类型。还有一点要注意的是，函数参数类型从 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":"​ 变成了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;T"},{"Type":"NodeText","Data":"​，因为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":"​ 可能是动态大小的，因此需要用一个固定大小的指针(引用)来包裹它。"}]},{"ID":"20251027222407-mr6ihkl","Type":"NodeParagraph","Properties":{"id":"20251027222407-mr6ihkl","updated":"20251027224150"},"Children":[{"Type":"NodeText","Data":"Box\u003cstr\u003e："}]},{"ID":"20251027223256-sttoeds","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027223256-sttoeds","updated":"20251027224205"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"let s1: Box\u003cstr\u003e = Box::new(\"Hello there!\" as str);不知道大小\nlet s: Box\u003cstr\u003e = Box::from(\"hello\"); //可以\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027223418-yc72hdx","Type":"NodeParagraph","Properties":{"id":"20251027223418-yc72hdx","updated":"20251027223419"},"Children":[{"Type":"NodeText","Data":"可以让编译器来帮我们完成，只要告诉它我们需要的类型"}]},{"ID":"20251027223419-rte7g9b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027223419-rte7g9b","updated":"20251027223427"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"let s1: Box\u003cstr\u003e = \"Hello there!\".into();\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027223425-xlubmqz","Type":"NodeParagraph","Properties":{"id":"20251027223425-xlubmqz","updated":"20251027224631"},"Children":[{"Type":"NodeText","Data":"使用场景："}]},{"ID":"20251027224631-fexmane","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251027224631-fexmane","updated":"20251027224639"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"struct student {\n    name : Box\u003cstr\u003e,\n    age : i32\n}可以省一些内存\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20251027224640-tx9hsv2","Type":"NodeParagraph","Properties":{"id":"20251027224640-tx9hsv2","updated":"20251027224640"}}]}