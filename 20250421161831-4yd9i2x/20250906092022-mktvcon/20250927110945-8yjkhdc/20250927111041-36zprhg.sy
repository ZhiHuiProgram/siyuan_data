{"ID":"20250927111041-36zprhg","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250927111041-36zprhg","title":"字符串与切片","type":"doc","updated":"20251013143708"},"Children":[{"ID":"20250927113825-2z6w26r","Type":"NodeParagraph","Properties":{"id":"20250927113825-2z6w26r","updated":"20250927113846"},"Children":[{"Type":"NodeText","Data":"\u0026str  \u0026mut str //是字符串切片类型"}]},{"ID":"20251013143605-gpciolp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20251013143605-gpciolp","updated":"20251013143708"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"三个结构，buf size capacity\n    let ptr = story.as_mut_ptr() 或者as_ptr();  //buf指针\n    let len = story.len();\t\t\t\t\t\t//size\n    let capacity = story.capacity();\t\t\t//capacity\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250927111041-bucpnq2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250927111041-bucpnq2","updated":"20250927133848"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"let s = String::from(\"hello world\");\n\n如果切片为中文，不可以切到中间，否则会崩溃\nlet hello = \u0026s[0..5];   //左闭右开，得到的是hello\nlet world = \u0026s[6..11];\n\nlet slice = \u0026s[0..2]; //从0开始\nlet slice = \u0026s[..2];  //等效从0开始\n\nlet len = s.len();\nlet slice = \u0026s[4..len];  //切到最后\nlet slice = \u0026s[4..];  //等效切到最后\n\nlet slice = \u0026s[0..len]; //完全切片\nlet slice = \u0026s[..];\t\t//等效\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250927113531-hnz971e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250927113531-hnz971e","updated":"20250927113604"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"\nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(\u0026s);  //返回了一个不可变借用\n\n    s.clear(); // error!  试图修改s字符串\n\n    println!(\"the first word is: {}\", word); //但是不可变借用的作用域还没结束\n}\nfn first_word(s: \u0026String) -\u003e \u0026str {\n    \u0026s[..1]\n}  \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250927113608-dbsck2e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250927113608-dbsck2e","updated":"20250927113759"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"let s = \"Hello, world!\";\nlet s: \u0026str = \"Hello, world!\";  字符串常量是一个切片类型\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250927113820-bgywiz5","Type":"NodeParagraph","Properties":{"id":"20250927113820-bgywiz5","updated":"20250927134058"},"Children":[{"Type":"NodeText","Data":"字符串操作："}]},{"ID":"20250927134059-zla05g2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250927134059-zla05g2","updated":"20251013142308"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aWZjb25maWc="},{"Type":"NodeCodeBlockCode","Data":"构造：\n\tlet mut s = String::from(\"hello hello\");\n追加：\n\ts.push('!'); 追加字符\n\ts.push_str(\"world\"); 追加字符串\n插入：\n\ts.insert(4,',');\t\t插入字符\n\ts.insert_str(5,\"nihao\");  插入字符串\n替换：\n\tlet new_s = s.replace(\"hello\",\"nihao\");  替换了所有的hello  返回新的\n\tlet new_s = s.replacen(\"hello\",\"nihao\",1);  替换了从头开始一个hello  返回新的\n\ts.replace_range(5..6, \"HELLO\");  替换了5..6左闭右开的元素为HELLO  改旧的 需要mut\n删除：\n\tlet retpop = s.pop(); //返回最后一个字符并删除\n\ts.remove(0);  //底层是按字节删除的，但是如果删除了汉字的中间会报错\n\ts.truncate(3);  //删除从3开始到结束的所有字符 汉字同理\n\ts.clear(); //清空\n连接：\n\t+ += 相当于调用了add()方法，fn add(self, s: \u0026str) -\u003e String 第一个参数会发生所有权转移；\t\n\t所以如果要保留就要显示克隆  s = s.clone() + \u0026s1 ; s = s + \u0026s[3..6];\n\ts = s + \"hello\";  s = s + \u0026s1; s = s + s1.as_str();  \u0026s1会自动解引用为\u0026str\n\tlet s = format!(\"{} {}\",s1,\u0026str);  //类似sprintf\n转义：\n\t// \\u 可以输出一个 unicode 字符\n    let unicode_codepoint = \"\\u{211D}\";\n\t// 通过 \\ + 字符的十六进制表示，转义输出一个字符\n    let byte_escape = \"I'm writing \\x52\\x75\\x73\\x74!\";\n字符串提取：\n\tfor c in \"中国人\".chars() {  打印中国人\n    \tprintln!(\"{}\", c);\n\t}\n\tfor b in \"中国人\".bytes() {  打印9个底层编码\n    \tprintln!(\"{}\", b);\n\t}\n\t//索引字符\n\tuse utf8_slice;\n\tfn main() {\n\t   let s = \"The 🚀 goes to the 🌑!\";\n\t\n\t   let rocket = utf8_slice::slice(s, 4, 5);\n\t   // Will equal \"🚀\"\n\t}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250927155215-gybspmy","Type":"NodeParagraph","Properties":{"id":"20250927155215-gybspmy","updated":"20250927155215"}}]}